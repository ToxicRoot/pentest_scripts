import json
import sys
import os
import threading
from itertools import islice
from lxml import etree

# Import of vFeed API
from lib.core.methods import * 
from lib.core.search import Search

def get_nmap_data(xml_file):
	result_dict = {}

	print "\n[*] Parsing NMap file: " + xml_file
	xmlData = etree.parse(xml_file)

	nmap_hosts = xmlData.findall('//host')
	for host in nmap_hosts:
		host_addr = host.find('address').attrib['addr']
		for item in host.findall('ports'):
			for port in item.findall('port'):
				host_port = port.attrib['portid']
				host_proto = port.attrib['protocol']
				try:
					host_product = port.find('service').attrib['product']
					host_version = port.find('service').attrib['version']
				except KeyError as e:
					host_product = ''
					host_version = ''

				if host_product and host_version:
					if result_dict.has_key(host_addr):
						result_dict[host_addr].append((str(host_port), host_proto, host_product, host_version))
					else:
						result_dict[host_addr] = [(str(host_port), host_proto, host_product, host_version)]

	return result_dict

def process_data(hosts_dict):
	global res_dict, host_count

	for host, service_list in hosts_dict.iteritems():
		for service in service_list:
			serv_ver = service[3].split('.')
			vfeed_search = Search('{} {}'.format(service[2], service[3]))
			good_version = '{} {}'.format(service[2], service[3])
			vuln_list = vfeed_search.detect_entry()
			if not vuln_list:
				vfeed_search = Search('{} {}'.format(service[2], '.'.join(serv_ver[0]+serv_ver[1])))
				good_version = '{} {}'.format(service[2], '.'.join(serv_ver[0]+serv_ver[1]))
				vuln_list = vfeed_search.detect_entry()
			
			if vuln_list:
				if good_version not in res_dict:
					res_dict[good_version] = ([],[],[],[])	# CVE, INFO, HOSTS, Exploit PoC
				
				for vuln in vuln_list:
					write_vuln = False

					vuln_severity_json = CveRisk(vuln[0]).get_severity()
					vuln_severity = json.loads(vuln_severity_json)
					if len(vuln_severity) != 0:
						for data in vuln_severity:
							for key, value in data.iteritems():
								if key == 'severity' and value in ['Moderate', 'High']:
									vuln_severity = value
									write_vuln = True

					if write_vuln:
						if vuln[0] not in res_dict[good_version][0]:
							res_dict[good_version][0].append(vuln[0])
						
						host_to_write = '{} ({} {})'.format(host, service[2], service[3])
						if host_to_write not in res_dict[good_version][2]:
							res_dict[good_version][2].append(host_to_write)
						
						info = CveInfo(vuln[0]).get_cve()
						cve_info = json.loads(info)
						for vuln_info in cve_info:
							for key, value in vuln_info.iteritems():
								vuln_summ = '\n'+vuln[0]+': '+value+'\nSeverity: '+vuln_severity
								if key == 'summary' and vuln_summ not in res_dict[good_version][1]:
									res_dict[good_version][1].append(vuln_summ)
						
						msf = CveExploit(vuln[0]).get_msf()
						if len(json.loads(msf)) != 0:
							msf_data = json.loads(msf)
							for vuln_dict in msf_data:
								for key, value in vuln_dict.iteritems():
									if key == 'file' and value not in res_dict[good_version][3]:
										res_dict[good_version][3].append(value)

						edb = CveExploit(vuln[0]).get_edb()
						if len(json.loads(edb)) != 0:
							edb_data = json.loads(edb)
							for vuln_dict in edb_data:
								for key, value in vuln_dict.iteritems():
									if key == 'url' and value not in res_dict[good_version][3]:
										res_dict[good_version][3].append(value)
		
		host_count += 1

	return

def chunks(data, SIZE=100):
	it = iter(data)
	for i in xrange(0, len(data), SIZE):
		yield {k:data[k] for k in islice(it, SIZE)}

def progress(count, total, suffix=''):
	bar_len = 60
	filled_len = int(round(bar_len * count / float(total)))

	percents = round(100.0 * count / float(total), 1)
	bar = '=' * filled_len + '-' * (bar_len - filled_len)

	sys.stdout.write('[%s] %s%s ...%s\r' % (bar, percents, '%', suffix))

# ----------------------------------------------------------------------------------------- #

nmap_report = 'nmap_output.xml'
res_dict = {}
host_count = 0
proc_list = []

hosts_dict = get_nmap_data(nmap_report)

chunk_size = len(hosts_dict) / 4
for dict_chunk in chunks(hosts_dict, chunk_size):
	proc = threading.Thread(target=process_data, args=(dict_chunk,))
	proc_list.append(proc)
	proc.daemon = True
	proc.start()

print '[*] Processing data:'
os.system('setterm -cursor off')
dead_count = 0 
total_count = len(proc_list)
while dead_count < total_count:
	progress(host_count, len(hosts_dict))
	for proc in proc_list:
		if not proc.isAlive():
			proc_list.remove(proc)
			dead_count += 1
os.system('setterm -cursor on')
print "\n"

with open('test.txt', 'w') as out_file:
	for key, value in res_dict.iteritems():
		cve, info, host, exploit = value
		cve = ', '.join(cve)
		info = '\n'.join(info)
		host = '\n'.join(host)
		exploit = '\n'.join(exploit)

		out_file.write('\n--[ Service: ' + key + '\n')
		out_file.write('\n--[ CVEs: \n\n' + cve + '\n')
		out_file.write('\n--[ Vuln Info: \n' + info + '\n')
		out_file.write('\n--[ Host: \n\n' + host + '\n')
		out_file.write('\n--[ Exploit PoC: \n\n' + exploit + '\n')
		out_file.write('# ------------------------------------------------------------ # \n')