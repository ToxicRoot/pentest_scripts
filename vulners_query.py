import requests
import urllib
import getopt
import sys
import os
import threading
from itertools import islice
from lxml import etree

search_url = "https://vulners.com/api/v0/search/"
cvss_min_score = 0.0

res_dict = {}
host_count = 0

def get_nmap_data(xml_file):
    result_dict = {}

    print "\n[*] Parsing NMap file: " + xml_file
    xmlData = etree.parse(xml_file)

    nmap_hosts = xmlData.findall('//host')
    for host in nmap_hosts:
        host_addr = host.find('address').attrib['addr']
        for item in host.findall('ports'):
            for port in item.findall('port'):
                host_port = port.attrib['portid']
                host_proto = port.attrib['protocol']
                try:
                    host_product = port.find('service').attrib['product']
                    host_version = port.find('service').attrib['version']
                except KeyError as e:
                    if e[0] == 'product':
                        host_product = ''
                    if e[0] == 'version':
                        host_version = ''

                if host_product and host_version:
                    if result_dict.has_key(host_addr):
                        result_dict[host_addr].append((str(host_port), host_proto, host_product, host_version))
                    else:
                        result_dict[host_addr] = [(str(host_port), host_proto, host_product, host_version)]

    return result_dict

def process_nmap_data(hosts_dict):
    global res_dict, host_count

    for host, service_list in hosts_dict.iteritems():
        for service in service_list:
            # service[2] - host service name
            # service[3] - host service version (x.x.x)

            serv_ver = service[3].split('.')
            good_version = '{} {}'.format(service[2], service[3])
            req = requests.get(search_url + urllib.quote(good_version))
            vuln_list = req.json()['results']

            if not vuln_list:
                good_version = '{} {}'.format(service[2], '.'.join(serv_ver[0]+serv_ver[1]))
                req = requests.get(search_url + urllib.quote(good_version))
                vuln_list = req.json()['results']

            if vuln_list:
                for vuln in vuln_list:
                    if vuln['cvss']['score'] >= cvss_min_score:
                        if good_version not in res_dict:
                            res_dict[good_version] = ([],[],[],[])  # CVE, INFO, HOSTS, Exploit PoC

                        cve = str(', '.join(vuln['cvelist']))
                        if cve not in res_dict[good_version][0]:
                            res_dict[good_version][0].append(cve)

                        if vuln['type'] not in ('exploitdb', 'metasploit'):
                            vuln_summ = '\n'+cve+': '+vuln['description']+'\nCVSS Score: '+str(vuln['cvss']['score'])
                            if vuln_summ not in res_dict[good_version][1]:
                                res_dict[good_version][1].append(vuln_summ)
                        
                        host_to_write = '{} ({} {})'.format(host, service[2], service[3])
                        if host_to_write not in res_dict[good_version][2]:
                            res_dict[good_version][2].append(host_to_write)

                        if vuln['type'] in ('exploitdb', 'metasploit'):
                            exploit_link = '\n'+cve+': '+vuln['href']
                            if exploit_link not in res_dict[good_version][3]:
                                res_dict[good_version][3].append(exploit_link)

        host_count += 1

def chunks(data, SIZE=100):
    it = iter(data)
    for i in xrange(0, len(data), SIZE):
        yield {k:data[k] for k in islice(it, SIZE)}

def progress(count, total, suffix=''):
    bar_len = 60
    filled_len = int(round(bar_len * count / float(total)))

    percents = round(100.0 * count / float(total), 1)
    bar = '=' * filled_len + '-' * (bar_len - filled_len)

    sys.stdout.write('[%s] %s%s ...%s\r' % (bar, percents, '%', suffix))

def show_usage():
    print "usage: python "+sys.argv[0]+" [options] \n"
    print "\t -q, --query '<query_string>'\t : free text query of vulners.com"
    print "\t -n, --nmap <xml_report>\t : parse nmap XML report and query found services (-sV)"
    print ""

def main(argv):
    try:
        opts, args = getopt.getopt(argv, "hq:n:", ["query=", 'nmap=', "help"])
    except getopt.GetoptError:
        show_usage()
        sys.exit(2)
        
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            show_usage()

        elif opt in ('-q', '--query'):
            query_string = arg
            print '--[ Service: ' + query_string
            
            req = requests.get(search_url + urllib.quote(query_string))
            vuln_data = req.json()['results']

            for vuln in vuln_data:
                cve = str(', '.join(vuln['cvelist']))
                print '\n--[ CVE: ' + cve

                if vuln['type'] in ('cve', 'suse', 'centos', 'debian', 'ubuntu'):
                    vuln_summ = '\n'+cve + ': ' +vuln['description']+'\nCVSS Score: '+str(vuln['cvss']['score'])
                    print '--[ Vuln Info:\n' + vuln_summ

                if vuln['type'] in ('exploitdb', 'metasploit'):
                    exploit_link = '\n'+cve+': '+vuln['href']
                    print '--[ Exploit PoC:\n ' + exploit_link


        elif opt in ('-n', '--nmap'):
            proc_list = []
            hosts_dict = get_nmap_data(arg)

            chunk_size = len(hosts_dict) / 4
            for dict_chunk in chunks(hosts_dict, chunk_size):
                proc = threading.Thread(target=process_nmap_data, args=(dict_chunk,))
                proc_list.append(proc)
                proc.daemon = True
                proc.start()

            print '[*] Processing data:'
            os.system('setterm -cursor off')
            dead_count = 0 
            total_count = len(proc_list)
            while dead_count < total_count:
                progress(host_count, len(hosts_dict))
                for proc in proc_list:
                    if not proc.isAlive():
                        proc_list.remove(proc)
                        dead_count += 1
            os.system('setterm -cursor on')
            print "\n"

            with open('test.txt', 'w') as out_file:
                for key, value in res_dict.iteritems():
                    cve, info, host, exploit = value
                    cve = ', '.join(cve)
                    info = '\n'.join(info)
                    host = '\n'.join(host)
                    exploit = '\n'.join(exploit)

                    out_file.write('\n--[ Service: ' + key + '\n')
                    out_file.write('\n--[ CVEs: \n\n' + cve + '\n')
                    out_file.write('\n--[ Vuln Info: \n' + info + '\n')
                    out_file.write('\n--[ Host: \n\n' + host + '\n')
                    out_file.write('\n--[ Exploit PoC: \n\n' + exploit + '\n')
                    out_file.write('# ------------------------------------------------------------ # \n')

# --[ MAIN ]-- #

if __name__ == '__main__':
    main(sys.argv[1:])
